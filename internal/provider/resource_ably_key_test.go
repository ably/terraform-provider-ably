// Package provider implements the Ably provider for Terraform
package provider

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/acctest"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

// Test Create and Update of an Ably Key with:
// Step 1: Create w/ params (app_name=autogenerated, key_name=autogenerated, capabilities.0=publish, capabilities.1=subscribe)
// Step 2: Update w/ params  (app_name=autogenerated, key_name=autogenerated, capabilities.0=history)
func TestAccAblyKey(t *testing.T) {
	appName := acctest.RandStringFromCharSet(15, acctest.CharSetAlphaNum)
	updateAppName := "acc-test-" + appName
	keyName := acctest.RandStringFromCharSet(15, acctest.CharSetAlphaNum)
	updateKeyName := "acc-test-" + appName
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			// Create and Read testing of ably_app.app0
			{
				Config: testAccAblyKeyConfig(appName, keyName, "channel100", `["publish", "subscribe"]`, true),
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("ably_app.app0", "name", appName),
					resource.TestCheckResourceAttr("ably_api_key.key0", "name", keyName),
					resource.TestCheckResourceAttr("ably_api_key.key0", "revocable_tokens", "true"),
					resource.TestCheckResourceAttr("ably_api_key.key0", "capabilities.channel100.0", "publish"),
					resource.TestCheckResourceAttr("ably_api_key.key0", "capabilities.channel100.1", "subscribe"),
					resource.TestCheckResourceAttrWith("ably_api_key.key0", "key", func(value string) error {
						if value == "" {
							return fmt.Errorf("key can't be empty")
						}
						return nil
					}),
				),
			},
			// Update and Read testing of ably_app.app0
			{
				Config: testAccAblyKeyConfig(updateAppName, updateKeyName, "channel100", `["history"]`, false),
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttr("ably_app.app0", "name", updateAppName),
					resource.TestCheckResourceAttr("ably_api_key.key0", "name", updateKeyName),
					resource.TestCheckResourceAttr("ably_api_key.key0", "revocable_tokens", "false"),
					resource.TestCheckResourceAttr("ably_api_key.key0", "capabilities.channel100.0", "history"),
					resource.TestCheckResourceAttrWith("ably_api_key.key0", "key", func(value string) error {
						if value == "" {
							return fmt.Errorf("key can't be empty")
						}
						return nil
					}),
				),
			},
			// Delete testing automatically occurs in TestCase
		},
	})
}

// Function with inline HCL to provision an ably_app resource
// Takes App name, Key Name, Capability Name and Capability List as function params.
func testAccAblyKeyConfig(appName string, keyName string, keyCapabilityName0 string, keyCapabilityCap0 string, revocableTokens bool) string {
	return fmt.Sprintf(`
terraform {
	required_providers {
		ably = {
		source = "github.com/ably/ably"
		}
	}
}

# You can provide your Ably Token & URL inline or use environment variables ABLY_ACCOUNT_TOKEN & ABLY_URL
provider "ably" {}

resource "ably_app" "app0" {
	name     = %[1]q
	status   = "enabled"
	tls_only = true
}

resource "ably_api_key" "key0" {
	app_id = ably_app.app0.id
	name   = %[2]q
	capabilities = {
	  %[3]q = %[4]s
	}
	revocable_tokens = %[5]t
  }
`, appName, keyName, keyCapabilityName0, keyCapabilityCap0, revocableTokens)
}
